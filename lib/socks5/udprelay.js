// Generated by CoffeeScript 1.6.3
(function() {
  var dgram, inetNtoa, utils;

  utils = require('./utils');

  inetNtoa = function(buf) {
    return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
  };

  dgram = require('dgram');

  exports.createServer = function(port, timeout) {
    var clientKey, clients, server;
    server = dgram.createSocket("udp4");
    clients = {};
    clientKey = function(localAddr, localPort, remoteAddr, remotePort) {
      return "" + localAddr + ":" + localPort + ":" + remoteAddr + ":" + remotePort;
    };
    server.on("message", function(data, rinfo) {
      var addrLen, addrtype, client, frag, headerLength, key, remoteAddr, remotePort;
      console.log("server got: " + data + " from " + rinfo.address + ":" + rinfo.port);
      frag = data[2];
      utils.debug("frag:" + frag);
      if (frag !== 0) {
        utils.wran("drop a message since frag is not 0");
        return;
      }
      addrtype = data[3];
      if (addrtype === 3) {
        addrLen = data[4];
      } else if (addrtype !== 1 && addrtype !== 4) {
        utils.error("unsupported addrtype: " + addrtype);
        connection.destroy();
        return;
      }
      if (addrtype === 1) {
        remoteAddr = inetNtoa(data.slice(4, 8));
        remotePort = data.readUInt16BE(8);
        headerLength = 10;
      } else if (addrtype === 4) {
        remoteAddr = inet.inet_ntop(data.slice(4, 20));
        remotePort = data.readUInt16BE(20);
        headerLength = 22;
      } else {
        remoteAddr = data.slice(5, 5 + addrLen).toString("binary");
        remotePort = data.readUInt16BE(5 + addrLen);
        headerLength = 5 + addrLen + 2;
      }
      utils.debug("UDP send to " + remoteAddr + ":" + remotePort);
      key = clientKey(rinfo.address, rinfo.port, remoteAddr, remotePort);
      if (clients[key]) {
        client = clients[key];
      } else {
        client = dgram.createSocket("udp4");
        clients[key] = client;
        client.on("message", function(data1, rinfo1) {
          var data2;
          utils.debug("client got " + data1 + " from " + rinfo1.address + ":" + rinfo1.port);
          data2 = Buffer.concat([data.slice(0, headerLength), data1]);
          return server.send(data2, 0, data2.length, rinfo.port, rinfo.address, function(err, bytes) {
            return utils.debug("remote to client sent");
          });
        });
        client.on("error", function(err) {
          return utils.debug("error: " + err);
        });
        client.on("close", function() {
          utils.debug("close");
          return delete clients[key];
        });
      }
      utils.debug("pairs: " + (Object.keys(clients).length));
      return client.send(data, headerLength, data.length - headerLength, remotePort, remoteAddr, function(err, bytes) {
        return utils.debug("client to remote sent");
      });
    });
    server.on("listening", function() {
      var address;
      address = server.address();
      return console.log("server listening " + address.address + ":" + address.port);
    });
    server.bind(port);
    return server;
  };

}).call(this);
